<?php

/**
 * @file
 * The main Module Permissions module file.
 *
 * Module Permissions allows a subset of modules to be enabled/disabled.
 */

/**
 * Implements hook_hook_info().
 */
function module_permissions_hook_info() {
  $hooks = array(
    'module_permissions_access' => array(
      'group' => 'module_permissions',
    ),
    'module_permissions_restrict' => array(
      'group' => 'module_permissions',
    ),
  );

  return $hooks;
}

/**
 * Implements hook_module_implements_alter().
 */
function module_permissions_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' || $hook == 'menu_alter' || $hook == 'system_info_alter') {
    $group = $implementations['module_permissions'];
    unset($implementations['module_permissions']);
    $implementations['module_permissions'] = $group;
  }
}

/**
 * Implements hook_permission().
 */
function module_permissions_permission() {
  return array(
    'administer module permissions' => array(
      'title' => t('Administer the list of modules that can be managed by others'),
      'description' => t('Add and remove modules from the managed module list.'),
      'restrict access' => TRUE,
    ),
    'administer managed modules' => array(
      'title' => t('Administer managed modules'),
      'description' => t('Enable and disable modules from the managed module list.'),
      'restrict access' => TRUE,
    ),
    'administer managed modules permissions' => array(
      'title' => t('Administer managed modules permissions'),
      'description' => t('Configure permissions for the modules that are in the managed modules list.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function module_permissions_menu_alter(&$items) {
  // System user permissions and role forms.
  if (isset($items['admin/people/permissions'])) {
    $items['admin/people/permissions']['access callback'] = 'module_permissions_access';
    $items['admin/people/permissions']['access arguments'] = array('user_admin_permissions');
  }
  // System modules list.
  if (isset($items['admin/modules'])) {
    $items['admin/modules']['access callback'] = 'module_permissions_access';
    $items['admin/modules']['access arguments'] = array('system_modules');
  }
  // System modules confirm.
  if (isset($items['admin/modules/list/confirm'])) {
    $items['admin/modules/list/confirm']['access callback'] = 'module_permissions_access';
    $items['admin/modules/list/confirm']['access arguments'] = array('system_modules');
  }
}

/**
 * Provide a menu access callback.
 *
 * @see module_permissions_menu_alter()
 */
function module_permissions_access($op = 'system_modules', $account = NULL) {
  $access = &drupal_static(__FUNCTION__, array());

  $account = !empty($account) ? $account : $GLOBALS['user'];
  // Statically cache access by user account ID, and operation.
  $cid = $account->uid . ':' . $op;

  if (!isset($access[$cid])) {
    // Return FALSE by default.
    $access[$cid] = FALSE;

    // User #1 has all privileges:
    if ($account->uid == 1) {
      $access[$cid] = TRUE;

      return $access[$cid];
    }

    // Provide access hook for other modules.
    $access_results = module_invoke_all('module_permissions_access', $op, $account);

    if (in_array(FALSE, $access_results, TRUE)) {
      $access[$cid] = FALSE;

      return $access[$cid];
    }
    elseif (in_array(TRUE, $access_results, TRUE)) {
      $access[$cid] = TRUE;

      return $access[$cid];
    }

    // Check OP.
    if ($op == 'system_modules') {
      // Perform basic permission checks first.
      if (user_access('administer modules', $account)) {
        $access[$cid] = TRUE;

        return $access[$cid];
      }
      // Module permissions permission settings.
      if (user_access('administer managed modules', $account)) {
        $access[$cid] = TRUE;

        return $access[$cid];
      }
    }
    elseif ($op == 'user_admin_permissions') {
      // Perform basic permission checks first.
      if (user_access('administer permissions', $account)) {
        $access[$cid] = TRUE;

        return $access[$cid];
      }
      // Module permissions permission settings.
      if (user_access('administer managed modules permissions', $account) && user_access('administer managed modules', $account)) {
        $access[$cid] = TRUE;

        return $access[$cid];
      }
    }
  }

  return $access[$cid];
}

/**
 * Provide a restrict status check callback.
 *
 * @see module_permissions_form_alter()
 */
function module_permissions_restrict($op = 'system_modules', $account = NULL) {
  $restrict = &drupal_static(__FUNCTION__, array());

  $account = !empty($account) ? $account : $GLOBALS['user'];
  // Statically cache access by user account ID, and operation.
  $cid = $account->uid . ':' . $op;

  if (!isset($restrict[$cid])) {
    // Return TRUE by default.
    $restrict[$cid] = TRUE;

    // User #1 has all privileges:
    if ($account->uid == 1) {
      $restrict[$cid] = FALSE;

      return $restrict[$cid];
    }

    // Provide access hook for other modules.
    $restrict_results = module_invoke_all('module_permissions_restrict', $op, $account);

    if (in_array(TRUE, $restrict_results, TRUE)) {
      $restrict[$cid] = TRUE;

      return $restrict[$cid];
    }
    elseif (in_array(FALSE, $restrict_results, TRUE)) {
      $restrict[$cid] = FALSE;

      return $restrict[$cid];
    }

    // Check OP.
    if ($op == 'system_modules') {
      // Perform basic permission checks first.
      if (user_access('administer modules', $account)) {
        $restrict[$cid] = FALSE;

        return $restrict[$cid];
      }
      // Module permissions permission settings.
      if (user_access('administer managed modules', $account)) {
        $restrict[$cid] = TRUE;

        return $restrict[$cid];
      }
    }
    elseif ($op == 'user_admin_permissions') {
      // Perform basic permission checks first.
      if (user_access('administer permissions', $account)) {
        $restrict[$cid] = FALSE;

        return $restrict[$cid];
      }
      // Module permissions permission settings.
      if (user_access('administer managed modules permissions', $account) && user_access('administer managed modules', $account)) {
        $restrict[$cid] = TRUE;

        return $restrict[$cid];
      }
    }
  }

  return $restrict[$cid];
}

/**
 * Implements hook_form_alter().
 */
function module_permissions_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'system_modules':
    case 'user_admin_permissions':
      if (module_permissions_restrict($form_id)) {
        module_permissions_form_handler($form, 'module_permissions_form_' . $form_id . '_handler');
      }
      break;
  }
}

/**
 * Form alter handler callback.
 */
function module_permissions_form_handler(&$form, $callback = '') {
  // Load module inc file.
  module_load_include('inc', 'module_permissions', 'includes/module_permissions.forms');

  if (!empty($callback) && function_exists($callback)) {
    $callback($form);
    // Add logs submit callback.
    $form["#submit"][] = 'module_permissions_logs_submit';
  }
  else {
    // Fallback if function not exists.
    drupal_access_denied();
  }
}

/**
 * Implements hook_system_info_alter().
 */
function module_permissions_system_info_alter(&$info, $file, $type) {
  // Limit type module.
  if ($type == 'module') {
    $protected_modules = module_permissions_load_protected_modules();
    if (isset($protected_modules[$file->name])) {
      // Protect this module.
      $info['required'] = TRUE;
      $info['explanation'] = t('This module is required and protected in current site');
    }
  }
}

/**
 * Get managed modules list.
 */
function module_permissions_load_managed_modules() {
  $managed_modules = &drupal_static(__FUNCTION__);

  if (!isset($managed_modules)) {
    $managed_modules = variable_get('module_permissions_managed_modules', array());
    $managed_modules = array_flip($managed_modules);
    // Remove module permissions from list.
    if (isset($managed_modules['module_permissions'])) {
      unset($managed_modules['module_permissions']);
    }
  }

  return $managed_modules;
}

/**
 * Get protected modules list.
 */
function module_permissions_load_protected_modules() {
  $protected_modules = &drupal_static(__FUNCTION__);

  if (!isset($protected_modules)) {
    $protected_modules = variable_get('module_permissions_protected_modules', array());
    $protected_modules = array_flip($protected_modules);
    // Remove module permissions from list.
    if (isset($protected_modules['module_permissions'])) {
      unset($protected_modules['module_permissions']);
    }
  }

  return $protected_modules;
}

/**
 * Form submission callback.
 */
function module_permissions_logs_submit(&$form, &$form_state) {
  if (!empty($form_state['__module_permissions_log_logged'])) {
    // Some forms are submitted twice, for instance the node_form.
    // We will only call the submit callback once.
    return;
  }

  $form_state['__module_permissions_log_logged'] = TRUE;

  global $user;
  // Get form id.
  $form_id = $form['#form_id'];

  if ($form_id === 'user_admin_permissions') {
    foreach ($form_state['values']['role_names'] as $rid => $name) {
      // Grant new permissions for the role.
      $grant = array_filter($form_state['values'][$rid]);
      if (!empty($grant)) {
        watchdog('module_permissions', 'User %name granted following permissions %permissions from role %rid on %form_id page', array(
          '%name' => $user->name,
          '%permissions' => implode(',', array_keys($grant)),
          '%rid' => $rid,
          '%form_id' => $form_id,
        ));
      }
      // Revoke permissions for the role.
      $revoke = array_diff_assoc($form_state['values'][$rid], $grant);
      if (!empty($revoke)) {
        watchdog('module_permissions', 'User %name revoked following permissions "%permissions" from role %rid on %form_id page', array(
          '%name' => $user->name,
          '%permissions' => implode(',', array_keys($revoke)),
          '%rid' => $rid,
          '%form_id' => $form_id,
        ));
      }
    }
  }
  elseif ($form_id === 'system_modules') {
    foreach ($form_state['values']['modules'] as $package => $modules) {
      foreach ($modules as $key => $module) {
        if (isset($form['modules'][$package][$key]['enable']['#default_value'])) {
          $default_value = $form['modules'][$package][$key]['enable']['#default_value'];
        }
        else {
          $default_value = $form['locked'][$package][$key]['enable']['#default_value'];
        }
        if ($default_value != $module['enable']) {
          if ($module['enable']) {
            $recent_modules[] = t('enable @module', array('@module' => $key));
          }
          else {
            $recent_modules[] = t('disable @module', array('@module' => $key));
          }
        }
      }
    }
    if (!empty($recent_modules)) {
      watchdog('module_permissions', 'User %name performed following actions "%modules" on %form_id page', array(
        '%name' => $user->name,
        '%modules' => implode(',', $recent_modules),
        '%form_id' => $form_id,
      ));
    }
  }
}
