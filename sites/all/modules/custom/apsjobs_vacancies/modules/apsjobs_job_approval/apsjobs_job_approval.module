<?php

//require_once drupal_get_path('module', 'apsjobs_job_approval') . '/apsjobs_job_approval.inc';

define('APSJOBS_APPROVAL_TYPE_DATE', 'Date');
define('APSJOBS_APPROVAL_TYPE_DETAIL', 'Detail');
define('APSJOBS_APPROVAL_VALUE_REJECTED', 'Rejected');
define('APSJOBS_APPROVAL_VALUE_APPROVED', 'Approved');

/**
 * Implements hook_init().
 */
function apsjobs_job_approval_init() {
  drupal_add_js(drupal_get_path('module', 'apsjobs_job_approval') . '/js/apsjobs_job_approval.js');
}

/**
 * Implements hook_menu().
 */

function apsjobs_job_approval_menu() {
  $items = array();

  $items['vacancy/unpublish'] = array(
    'title' => 'APSJobs unpublish vacancy',
    'page callback' => 'apsjobs_job_approval_unpublish_vacancy',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}
function apsjobs_job_approval_permission() {
  return array(
    'approve vacancy' =>  array(
      'title' => t('Approve Vacancy'),
      'restrict access' => TRUE,
    ),
  );
}

function apsjobs_job_approval_block_info() {
  $blocks = array();
  $blocks['apsjobs_vacancy_approval_form'] = array(
    'info' => t('APSJobs Approval Form'),
  );
  return $blocks;
}

function apsjobs_vacancy_approval_form($form, &$form_state) {
  $form = array();
  $nid = NULL;
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $nid = arg(1);
  }
  $vacancy = node_load($nid);
  if($vacancy) {
    $form['nid'] = array(
      '#type' => 'hidden',
      '#value' => $vacancy->nid,
    );
    $form['vid'] = array(
      '#type' => 'hidden',
      '#value' => $vacancy->vid,
    );

    $form['popup'] = array(
      '#type' => 'container',
      '#prefix' => '<div id="reject-popup" class="modal fade" role="dialog"><div class="modal-dialog"><div class="modal-content"><div class="modal-body">',
      'approval_comment' => array(
        '#type' => 'textarea',
        '#title' => t("Message:"),
        '#attributes' => array('placeholder' => 'Enter messages'),
      ),
      'cancel' => array(
        '#markup' => '<button type="button" class="form-submit" class="close" data-dismiss="modal">' . t('Cancel') . '</button>',
      ),
      'confirm_reject' => array(
        '#type' => 'submit',
        '#value' => t('Confirm rejection'),
      ),
      '#suffix' => '</div></div></div></div>',
    );
    $form['btn_group'] = array(
      '#type' => 'container',
      'publish' => array(
        '#type' => 'submit',
        '#value' => t('Publish'),
      ),
      'edit' => array(
        '#markup' => '<a class="form-submit" href="/aps-agency/edit-vacancy/' . $vacancy->nid . '">' . t('Edit') . '</a>',
      ),
      'reject' => array(
        '#markup' => '<button type="button" class="form-submit" data-toggle="modal" data-target="#reject-popup">' . t('Reject') . '</button>',
      ),
    );
  }

  return $form;
}

function apsjobs_vacancy_approval_form_validate(&$form, &$form_state) {

}

function apsjobs_vacancy_approval_form_submit(&$form, &$form_state) {
  $values = $form_state['values'];
  $vid = $values['vid'];
  $nid = $values['nid'];
  $approval_comment = $values['approval_comment'];
  $vacancy = node_load($nid);

  if ($form_state['clicked_button']['#id'] == 'edit-publish') {
    $state = 'approved';
    $wrapper = entity_metadata_wrapper('node', $vacancy);
    $current = time();
    if ($wrapper->field_publish_date->value() <= $current) {
      $state = 'published';
    }
  }
  if ($form_state['clicked_button']['#id'] == 'edit-confirm-reject') {
    $state = 'rejected';
  }

  $row = db_select('apsjobs_vacancy_approval', 's')
    ->fields('s')
    ->condition('nid', $nid)
    ->condition('vid', $vid)
    ->execute()
    ->fetchObject();

  $result = FALSE;
  if($row) {
    $result = db_update('apsjobs_vacancy_approval')
      ->fields(array(
        'approval_date' => $state,
        'approval_detail' => $state,
        'approval_comment' => $approval_comment,
        'changed' => time()
      ))
      ->condition('nid', $nid)
      ->condition('vid', $vid)
      ->execute();
  }
  else {
    $result = db_insert('apsjobs_vacancy_approval')
      ->fields(array(
        'nid' => $nid,
        'vid' => $vid,
        'approval_date' => $state,
        'approval_detail' => $state,
        'approval_comment' => $approval_comment,
        'created' => time(),
        'changed' => time()
      ))
      ->execute();
  }

  if ($result) {
    $vacancy->workbench_moderation_state_new = $state;
    $vacancy->revision = 1;
    $vacancy->log = "Bulk moderation state change.";
    node_save($vacancy);
    //TODO disable send mail on test, enable on production
    apsjobs_job_approval_send_mail($vacancy, $state, $approval_comment);
    drupal_set_message(t('You have '. $state . ' vacancy "' . $vacancy->title . '".'), 'status', FALSE);
    drupal_goto('aps-agency/my-job-vacancies/unapproved-vacancies');
  }
  else {
    drupal_set_message(t('Fail to approve/reject this vacancy.'), 'error', FALSE);
  }
}

function apsjobs_job_approval_send_mail($vacancy, $state, $approval_comment = NULL) {
  $creator = user_load($vacancy->uid);

  if ($state == 'published') {
    $params = array(
      'subject' => 'APSJobs Notification',
      'body' => 'The ' . l(t('vacancy'), 'node/' . $vacancy->nid) . ' has been approved and published',
    );
  }
  else {
    $params = array(
      'subject' => 'APSJobs Notification',
      'body' => 'The ' . l(t('vacancy'), 'node/' . $vacancy->nid) . ' has been rejected. Message of approver: ' . $approval_comment,
    );
  }

  drupal_mail('apsjobs_job_approval', 'govcms_mail', $creator->mail, LANGUAGE_NONE, $params, $from = NULL, $send = TRUE);
}

/**
 * Implement hook_mail().
 */
function apsjobs_job_approval_mail($key, &$message, $params) {
  switch ($key) {
    case 'govcms_mail':
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Implements hoock_block_view().
 */
function apsjobs_job_approval_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'apsjobs_vacancy_approval_form':
      $block['content'] = drupal_get_form('apsjobs_vacancy_approval_form');
      break;
  }
  return $block;
}

/**
 * Implements hook_cron().
 */
function apsjobs_job_approval_cron() {
  // Publish all approved job reach publish_date
  $query = db_select('workbench_moderation_node_history', 'w');
  $all_approved_vacancy = $query->fields('w', array('nid'))
  ->condition('w.state', 'approved', '=')
  ->condition('w.is_current', 1, '=')
  ->execute()
  ->fetchAll();
  $nids = array();
  foreach ($all_approved_vacancy as $key => $value) {
    $nids[] = $value->nid;
  }
  $vacancies = entity_load('node', $nids);
  foreach ($vacancies as $vacancy) {
    $wrapper = entity_metadata_wrapper('node', $vacancy);
    $current = time();
    if (isset($wrapper->field_publish_date) && $wrapper->field_publish_date->value() < $current) {
      workbench_moderation_moderate($vacancy, 'published');
    }
  }

  // Close all published job reach closing_date
  $query = db_select('workbench_moderation_node_history', 'w');
  $all_published_vacancy = $query->fields('w', array('nid'))
  ->condition('w.state', 'published', '=')
  ->condition('w.is_current', 1, '=')
  ->execute()
  ->fetchAll();
  $nids = array();
  foreach ($all_published_vacancy as $key => $value) {
    $nids[] = $value->nid;
  }
  $vacancies = entity_load('node', $nids);
  foreach ($vacancies as $vacancy) {
    $wrapper = entity_metadata_wrapper('node', $vacancy);
    $current = time();
    if (!empty($vacancy->field_closing_date)) {
      $closing_time = strtotime($vacancy->field_closing_date[LANGUAGE_NONE][0]['value']);
      if ($closing_time < $current) {
        workbench_moderation_moderate($vacancy, 'closed');
      }
    }
  }
}

function apsjobs_job_approval_unpublish_vacancy() {
  $nid = $_POST['nid'];
  if (isset($nid)) {
    $state = 'draft';
    $vacancy = node_load($nid);
    workbench_moderation_moderate($vacancy, $state);
    echo 'true'; exit;
  }
}
